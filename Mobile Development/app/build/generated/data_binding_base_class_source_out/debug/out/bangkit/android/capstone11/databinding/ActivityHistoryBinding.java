// Generated by view binder compiler. Do not edit!
package bangkit.android.capstone11.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import bangkit.android.capstone11.R;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityHistoryBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final BottomNavigationView bottomBar;

  @NonNull
  public final ImageView btnBack;

  @NonNull
  public final ImageView btnNearestDentist;

  @NonNull
  public final CardView cardAccuracy;

  @NonNull
  public final CardView cardFrequency;

  @NonNull
  public final CardView cardHistory;

  @NonNull
  public final CardView cardResult;

  @NonNull
  public final TextView history;

  @NonNull
  public final ImageView ivAvatar;

  @NonNull
  public final View topBar;

  @NonNull
  public final TextView tvAccuracyResult;

  @NonNull
  public final TextView tvCheckupAccuracy;

  @NonNull
  public final TextView tvCheckupCondition;

  @NonNull
  public final TextView tvCheckupResult;

  @NonNull
  public final TextView tvFrequency;

  @NonNull
  public final TextView tvFrequencyResult;

  @NonNull
  public final TextView tvKidsDataAddress;

  @NonNull
  public final TextView tvKidsDataAge;

  @NonNull
  public final TextView tvKidsDataGender;

  @NonNull
  public final TextView tvKidsDataName;

  @NonNull
  public final TextView tvNearestDentist;

  @NonNull
  public final TextView tvSuggestion;

  @NonNull
  public final TextView tvSuggestionResult;

  private ActivityHistoryBinding(@NonNull ConstraintLayout rootView,
      @NonNull BottomNavigationView bottomBar, @NonNull ImageView btnBack,
      @NonNull ImageView btnNearestDentist, @NonNull CardView cardAccuracy,
      @NonNull CardView cardFrequency, @NonNull CardView cardHistory, @NonNull CardView cardResult,
      @NonNull TextView history, @NonNull ImageView ivAvatar, @NonNull View topBar,
      @NonNull TextView tvAccuracyResult, @NonNull TextView tvCheckupAccuracy,
      @NonNull TextView tvCheckupCondition, @NonNull TextView tvCheckupResult,
      @NonNull TextView tvFrequency, @NonNull TextView tvFrequencyResult,
      @NonNull TextView tvKidsDataAddress, @NonNull TextView tvKidsDataAge,
      @NonNull TextView tvKidsDataGender, @NonNull TextView tvKidsDataName,
      @NonNull TextView tvNearestDentist, @NonNull TextView tvSuggestion,
      @NonNull TextView tvSuggestionResult) {
    this.rootView = rootView;
    this.bottomBar = bottomBar;
    this.btnBack = btnBack;
    this.btnNearestDentist = btnNearestDentist;
    this.cardAccuracy = cardAccuracy;
    this.cardFrequency = cardFrequency;
    this.cardHistory = cardHistory;
    this.cardResult = cardResult;
    this.history = history;
    this.ivAvatar = ivAvatar;
    this.topBar = topBar;
    this.tvAccuracyResult = tvAccuracyResult;
    this.tvCheckupAccuracy = tvCheckupAccuracy;
    this.tvCheckupCondition = tvCheckupCondition;
    this.tvCheckupResult = tvCheckupResult;
    this.tvFrequency = tvFrequency;
    this.tvFrequencyResult = tvFrequencyResult;
    this.tvKidsDataAddress = tvKidsDataAddress;
    this.tvKidsDataAge = tvKidsDataAge;
    this.tvKidsDataGender = tvKidsDataGender;
    this.tvKidsDataName = tvKidsDataName;
    this.tvNearestDentist = tvNearestDentist;
    this.tvSuggestion = tvSuggestion;
    this.tvSuggestionResult = tvSuggestionResult;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_bar;
      BottomNavigationView bottomBar = ViewBindings.findChildViewById(rootView, id);
      if (bottomBar == null) {
        break missingId;
      }

      id = R.id.btn_back;
      ImageView btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.btn_nearest_dentist;
      ImageView btnNearestDentist = ViewBindings.findChildViewById(rootView, id);
      if (btnNearestDentist == null) {
        break missingId;
      }

      id = R.id.card_accuracy;
      CardView cardAccuracy = ViewBindings.findChildViewById(rootView, id);
      if (cardAccuracy == null) {
        break missingId;
      }

      id = R.id.card_frequency;
      CardView cardFrequency = ViewBindings.findChildViewById(rootView, id);
      if (cardFrequency == null) {
        break missingId;
      }

      id = R.id.card_history;
      CardView cardHistory = ViewBindings.findChildViewById(rootView, id);
      if (cardHistory == null) {
        break missingId;
      }

      id = R.id.card_result;
      CardView cardResult = ViewBindings.findChildViewById(rootView, id);
      if (cardResult == null) {
        break missingId;
      }

      id = R.id.history;
      TextView history = ViewBindings.findChildViewById(rootView, id);
      if (history == null) {
        break missingId;
      }

      id = R.id.iv_avatar;
      ImageView ivAvatar = ViewBindings.findChildViewById(rootView, id);
      if (ivAvatar == null) {
        break missingId;
      }

      id = R.id.top_bar;
      View topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      id = R.id.tv_accuracy_result;
      TextView tvAccuracyResult = ViewBindings.findChildViewById(rootView, id);
      if (tvAccuracyResult == null) {
        break missingId;
      }

      id = R.id.tv_checkup_accuracy;
      TextView tvCheckupAccuracy = ViewBindings.findChildViewById(rootView, id);
      if (tvCheckupAccuracy == null) {
        break missingId;
      }

      id = R.id.tv_checkup_condition;
      TextView tvCheckupCondition = ViewBindings.findChildViewById(rootView, id);
      if (tvCheckupCondition == null) {
        break missingId;
      }

      id = R.id.tv_checkup_result;
      TextView tvCheckupResult = ViewBindings.findChildViewById(rootView, id);
      if (tvCheckupResult == null) {
        break missingId;
      }

      id = R.id.tv_frequency;
      TextView tvFrequency = ViewBindings.findChildViewById(rootView, id);
      if (tvFrequency == null) {
        break missingId;
      }

      id = R.id.tv_frequency_result;
      TextView tvFrequencyResult = ViewBindings.findChildViewById(rootView, id);
      if (tvFrequencyResult == null) {
        break missingId;
      }

      id = R.id.tv_kids_data_address;
      TextView tvKidsDataAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvKidsDataAddress == null) {
        break missingId;
      }

      id = R.id.tv_kids_data_age;
      TextView tvKidsDataAge = ViewBindings.findChildViewById(rootView, id);
      if (tvKidsDataAge == null) {
        break missingId;
      }

      id = R.id.tv_kids_data_gender;
      TextView tvKidsDataGender = ViewBindings.findChildViewById(rootView, id);
      if (tvKidsDataGender == null) {
        break missingId;
      }

      id = R.id.tv_kids_data_name;
      TextView tvKidsDataName = ViewBindings.findChildViewById(rootView, id);
      if (tvKidsDataName == null) {
        break missingId;
      }

      id = R.id.tv_nearest_dentist;
      TextView tvNearestDentist = ViewBindings.findChildViewById(rootView, id);
      if (tvNearestDentist == null) {
        break missingId;
      }

      id = R.id.tv_suggestion;
      TextView tvSuggestion = ViewBindings.findChildViewById(rootView, id);
      if (tvSuggestion == null) {
        break missingId;
      }

      id = R.id.tv_suggestion_result;
      TextView tvSuggestionResult = ViewBindings.findChildViewById(rootView, id);
      if (tvSuggestionResult == null) {
        break missingId;
      }

      return new ActivityHistoryBinding((ConstraintLayout) rootView, bottomBar, btnBack,
          btnNearestDentist, cardAccuracy, cardFrequency, cardHistory, cardResult, history,
          ivAvatar, topBar, tvAccuracyResult, tvCheckupAccuracy, tvCheckupCondition,
          tvCheckupResult, tvFrequency, tvFrequencyResult, tvKidsDataAddress, tvKidsDataAge,
          tvKidsDataGender, tvKidsDataName, tvNearestDentist, tvSuggestion, tvSuggestionResult);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
